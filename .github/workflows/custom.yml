name: Build Wheel

on:
  workflow_dispatch: {}

jobs:
  build:

    runs-on: ubuntu-24.04-arm
    
    steps:
    - uses: actions/checkout@v4
      with:
          submodules: recursive

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        key: linux
        create-symlink: true
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        #sudo apt-get upgrade -y
        sudo apt-get install -y opencl-headers clinfo libsqlite3-dev
        sudo apt-get install -y ocl-icd-opencl-dev
        #sudo apt-get install -y intel-opencl-icd #intel-compute-runtime
    
    - name: Verify OpenCL installation
      run: clinfo

    - name: Install pytorch
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        python3 -m pip install --upgrade pip poetry
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        echo "Python3 Path = $(which python3)"
        echo "Site(s) = $(python3 -m site)"
        
    - name: Build
      env:
        CC: clang
        CXX: clang++
        CPPFLAGS: -fno-pie -no-pie -static -Wl,-no_pie
        LDFLAGS: -no-pie
        USE_CCACHE: 1
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        export CCACHE_SLOPPINESS=time_macros,clang_index_store,ivfsoverlay,include_file_ctime,include_file_mtime,modules,system_headers,pch_defines
        export CCACHE_FILECLONE=true
        export CCACHE_DEPEND=true
        export CCACHE_COMPILERCHECK=content
        
        source .venv/bin/activate
        SITE_PATH=$(find . -name "site-packages" -print -quit 2>/dev/null)
        echo "SITE_PATH = $SITE_PATH"
        echo "VIRTUAL_ENV = $VIRTUAL_ENV"
        
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH=$SITE_PATH/torch/share/cmake/Torch -DCMAKE_INSTALL_PREFIX=$HOME/.local ..
        make
        #make install
        ls -l
        ls -l pytorch_ocl
        ldd pytorch_ocl/pt_ocl.so
        
    - name: Package build
      run: |
        source .venv/bin/activate
        mkdir -p artifacts/pytorch_ocl
        cp -aR build/pytorch_ocl artifacts/pytorch_ocl/
        cd artifacts/pytorch_ocl
        #poetry init -n
        VERSION=$(git describe --always)
        python_full_version=$(python3 --version 2>&1)
        python_version_number=$(echo "$python_full_version" | awk '{print $2}')
        TORCH_VER=$(python -c "import torch; print(torch.__version__)")
        echo -e "Ver = $VERSION\nPythonVer = $python_version_number\nTorchVer = $TORCH_VER"
        cat > pyproject.toml<<EOF
        [project]
        name = "pytorch_ocl"
        version = "$VERSION"
        description = "OpenCL backend for pytorch"
        authors = [
          {name = "Artyom Beilis",email = "artyomtnk@yahoo.com"}
        ]
        license = { text = "MIT" }
        requires-python = ">=$python_version_number"
        dependencies = [
        ]

        [project.urls]
        homepage = "https://github.com/artyom-beilis/pytorch_dlprim"
        EOF
        
        poetry build
        #cd build
        #zip -r9 ../artifacts/pytorch_ocl.whl pytorch_ocl

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux build
        path: artifacts/
          
    - name: Test
      run: |
        source .venv/bin/activate
        cd build
        make install
        cd -
        
        export PYTHONPATH=build
        python mnist.py --device ocl
